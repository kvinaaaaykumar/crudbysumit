backend
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose
  .connect("mongodb://localhost:27017/test11000")
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error(err));

// Schema & Model
const personSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: { type: Number, required: true },
  gender: { type: String, enum: ["Male", "Female", "Other"], required: true },
});
const Person = mongoose.model("Person", personSchema);

// Routes
// Create
app.post("/api/people", async (req, res) => {
  try {
    const newPerson = new Person(req.body);
    await newPerson.save();
    res.status(201).json(newPerson);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Read All
app.get("/api/people", async (req, res) => {
  try {
    const people = await Person.find();
    res.status(200).json(people);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Update
app.put("/api/people/:id", async (req, res) => {
  try {
    const updatedPerson = await Person.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.status(200).json(updatedPerson);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete
app.delete("/api/people/:id", async (req, res) => {
  try {
    await Person.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "Person deleted" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log("server is running"));


frontend

import React, { useState, useEffect } from "react";
import axios from "axios";

const App = () => {
  const [people, setPeople] = useState([]);
  const [formData, setFormData] = useState({ name: "", age: "", gender: "" });
  const [editingId, setEditingId] = useState(null);

  // Fetch People
  useEffect(() => {
    axios
      .get("http://localhost:5000/api/people")
      .then((response) => setPeople(response.data))
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  // Handle Form Submission
  const handleSubmit = (e) => {
    e.preventDefault();
    if (editingId) {
      // Update Person
      axios
        .put(`http://localhost:5000/api/people/${editingId}`, formData)
        .then((response) => {
          setPeople((prev) =>
            prev.map((person) =>
              person._id === editingId ? response.data : person
            )
          );
          setEditingId(null);
          setFormData({ name: "", age: "", gender: "" });
        })
        .catch((error) => console.error("Error updating person:", error));
    } else {
      // Create Person
      axios
        .post("http://localhost:5000/api/people", formData)
        .then((response) => {
          setPeople((prev) => [...prev, response.data]);
          setFormData({ name: "", age: "", gender: "" });
        })
        .catch((error) => console.error("Error creating person:", error));
    }
  };

  // Handle Delete
  const handleDelete = (id) => {
    axios
      .delete(`http://localhost:5000/api/people/${id}`)
      .then(() => {
        setPeople((prev) => prev.filter((person) => person._id !== id));
      })
      .catch((error) => console.error("Error deleting person:", error));
  };

  // Handle Edit
  const handleEdit = (person) => {
    setEditingId(person._id);
    setFormData({ name: person.name, age: person.age, gender: person.gender });
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>People Management</h1>
      <form onSubmit={handleSubmit} style={{ marginBottom: "20px" }}>
        <input
          type="text"
          placeholder="Name"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          required
        />
        <input
          type="number"
          placeholder="Age"
          value={formData.age}
          onChange={(e) => setFormData({ ...formData, age: e.target.value })}
          required
        />
        <select
          value={formData.gender}
          onChange={(e) => setFormData({ ...formData, gender: e.target.value })}
          required
        >
          <option value="">Select Gender</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
          <option value="Other">Other</option>
        </select>
        <button type="submit">{editingId ? "Update" : "Add"}</button>
      </form>
      <ul>
        {people.map((person) => (
          <li key={person._id}>
            {person.name} - {person.age} - {person.gender}
            <button onClick={() => handleEdit(person)}>Edit</button>
            <button onClick={() => handleDelete(person._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;
